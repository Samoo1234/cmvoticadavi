-- Script para criar a tabela custos_os
CREATE TABLE custos_os (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  data DATE NOT NULL,
  valor_venda DECIMAL(10, 2) NOT NULL,
  custo_lentes DECIMAL(10, 2) NOT NULL DEFAULT 0,
  custo_armacoes DECIMAL(10, 2) NOT NULL DEFAULT 0,
  custo_mkt DECIMAL(10, 2) NOT NULL DEFAULT 0,
  outros_custos DECIMAL(10, 2) NOT NULL DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Adicionar comentários à tabela e colunas
COMMENT ON TABLE custos_os IS 'Tabela para armazenar os custos relacionados às Ordens de Serviço';
COMMENT ON COLUMN custos_os.id IS 'Identificador único do registro de custo';
COMMENT ON COLUMN custos_os.filial_id IS 'Referência à filial onde o custo foi registrado';
COMMENT ON COLUMN custos_os.data IS 'Data do registro do custo';
COMMENT ON COLUMN custos_os.valor_venda IS 'Valor total da venda';
COMMENT ON COLUMN custos_os.custo_lentes IS 'Custo das lentes';
COMMENT ON COLUMN custos_os.custo_armacoes IS 'Custo das armações';
COMMENT ON COLUMN custos_os.custo_mkt IS 'Custo de marketing';
COMMENT ON COLUMN custos_os.outros_custos IS 'Outros custos relacionados';
COMMENT ON COLUMN custos_os.created_at IS 'Data e hora de criação do registro';
COMMENT ON COLUMN custos_os.updated_at IS 'Data e hora da última atualização do registro';

-- Criar índices para melhorar a performance das consultas
CREATE INDEX idx_custos_os_filial_id ON custos_os(filial_id);
CREATE INDEX idx_custos_os_data ON custos_os(data);

-- Criar trigger para atualizar o campo updated_at automaticamente
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_timestamp
BEFORE UPDATE ON custos_os
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();
