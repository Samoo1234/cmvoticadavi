-- Script para criar todas as tabelas necessárias para o sistema CMV Ótica
-- Execute este script no SQL Editor do Supabase

BEGIN;

-- 1. Tabela de Filiais (deve ser criada primeiro devido às foreign keys)
CREATE TABLE IF NOT EXISTS filiais (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  endereco TEXT NOT NULL,
  telefone VARCHAR(20),
  responsavel VARCHAR(255),
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Tabela de Custos de OS (depende de filiais)
CREATE TABLE IF NOT EXISTS custos_os (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  data DATE NOT NULL,
  valor_venda DECIMAL(10, 2) NOT NULL,
  custo_lentes DECIMAL(10, 2) NOT NULL DEFAULT 0,
  custo_armacoes DECIMAL(10, 2) NOT NULL DEFAULT 0,
  custo_mkt DECIMAL(10, 2) NOT NULL DEFAULT 0,
  outros_custos DECIMAL(10, 2) NOT NULL DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Comentários nas tabelas
COMMENT ON TABLE filiais IS 'Tabela para armazenar informações das filiais';
COMMENT ON COLUMN filiais.id IS 'Identificador único da filial';
COMMENT ON COLUMN filiais.nome IS 'Nome da filial';
COMMENT ON COLUMN filiais.endereco IS 'Endereço completo da filial';
COMMENT ON COLUMN filiais.telefone IS 'Telefone de contato da filial';
COMMENT ON COLUMN filiais.responsavel IS 'Nome do responsável pela filial';
COMMENT ON COLUMN filiais.ativa IS 'Indica se a filial está ativa';
COMMENT ON COLUMN filiais.created_at IS 'Data e hora de criação do registro';

COMMENT ON TABLE custos_os IS 'Tabela para armazenar os custos relacionados às Ordens de Serviço';
COMMENT ON COLUMN custos_os.id IS 'Identificador único do registro de custo';
COMMENT ON COLUMN custos_os.filial_id IS 'Referência à filial onde o custo foi registrado';
COMMENT ON COLUMN custos_os.data IS 'Data do registro do custo';
COMMENT ON COLUMN custos_os.valor_venda IS 'Valor total da venda';
COMMENT ON COLUMN custos_os.custo_lentes IS 'Custo das lentes';
COMMENT ON COLUMN custos_os.custo_armacoes IS 'Custo das armações';
COMMENT ON COLUMN custos_os.custo_mkt IS 'Custo de marketing';
COMMENT ON COLUMN custos_os.outros_custos IS 'Outros custos relacionados';
COMMENT ON COLUMN custos_os.created_at IS 'Data e hora de criação do registro';
COMMENT ON COLUMN custos_os.updated_at IS 'Data e hora da última atualização do registro';

-- 4. Índices para melhorar performance
CREATE INDEX IF NOT EXISTS idx_filiais_ativa ON filiais(ativa);
CREATE INDEX IF NOT EXISTS idx_filiais_nome ON filiais(nome);
CREATE INDEX IF NOT EXISTS idx_custos_os_filial_id ON custos_os(filial_id);
CREATE INDEX IF NOT EXISTS idx_custos_os_data ON custos_os(data);

-- 5. Trigger para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_timestamp_custos_os ON custos_os;
CREATE TRIGGER set_timestamp_custos_os
BEFORE UPDATE ON custos_os
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- 6. Inserir dados de exemplo (filiais)
INSERT INTO filiais (nome, endereco, ativa) VALUES
('Filial Centro', 'Rua Principal, 123 - Centro', true),
('Filial Shopping', 'Av. Shopping, 456 - Bairro Comercial', true),
('Filial Norte', 'Rua Norte, 789 - Zona Norte', true)
ON CONFLICT DO NOTHING;

COMMIT;

-- Verificar se as tabelas foram criadas
SELECT 'Tabelas criadas com sucesso!' as status;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('filiais', 'custos_os'); 