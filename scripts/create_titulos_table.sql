-- Script para criar a tabela titulos
-- Execute este script no SQL Editor do Supabase

BEGIN;

-- Criar a tabela titulos se não existir
CREATE TABLE IF NOT EXISTS titulos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  fornecedor_id BIGINT NOT NULL REFERENCES fornecedores(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  tipo VARCHAR(255) DEFAULT 'Não especificado',
  valor DECIMAL(10, 2) NOT NULL,
  vencimento DATE NOT NULL,
  status VARCHAR(50) NOT NULL DEFAULT 'Pendente',
  pagamento DATE,
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Comentários na tabela
COMMENT ON TABLE titulos IS 'Tabela para armazenar títulos a pagar';
COMMENT ON COLUMN titulos.id IS 'Identificador único do título';
COMMENT ON COLUMN titulos.numero IS 'Número do título';
COMMENT ON COLUMN titulos.fornecedor_id IS 'Referência ao fornecedor';
COMMENT ON COLUMN titulos.filial_id IS 'Referência à filial';
COMMENT ON COLUMN titulos.tipo IS 'Tipo do título (baseado no tipo do fornecedor)';
COMMENT ON COLUMN titulos.valor IS 'Valor do título';
COMMENT ON COLUMN titulos.vencimento IS 'Data de vencimento';
COMMENT ON COLUMN titulos.status IS 'Status do título (Pendente, Pago, Vencido)';
COMMENT ON COLUMN titulos.pagamento IS 'Data do pagamento (se pago)';
COMMENT ON COLUMN titulos.observacoes IS 'Observações adicionais';
COMMENT ON COLUMN titulos.created_at IS 'Data e hora de criação do registro';
COMMENT ON COLUMN titulos.updated_at IS 'Data e hora da última atualização do registro';

-- Índices para melhorar performance
CREATE INDEX IF NOT EXISTS idx_titulos_numero ON titulos(numero);
CREATE INDEX IF NOT EXISTS idx_titulos_fornecedor_id ON titulos(fornecedor_id);
CREATE INDEX IF NOT EXISTS idx_titulos_filial_id ON titulos(filial_id);
CREATE INDEX IF NOT EXISTS idx_titulos_tipo ON titulos(tipo);
CREATE INDEX IF NOT EXISTS idx_titulos_vencimento ON titulos(vencimento);
CREATE INDEX IF NOT EXISTS idx_titulos_status ON titulos(status);

-- Trigger para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION trigger_set_timestamp_titulos()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_timestamp_titulos ON titulos;
CREATE TRIGGER set_timestamp_titulos
BEFORE UPDATE ON titulos
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp_titulos();

-- Trigger para definir o tipo baseado no fornecedor
CREATE OR REPLACE FUNCTION set_titulo_tipo_from_fornecedor()
RETURNS TRIGGER AS $$
BEGIN
  -- Se o tipo não foi especificado, buscar do fornecedor
  IF NEW.tipo IS NULL OR NEW.tipo = '' OR NEW.tipo = 'Não especificado' THEN
    SELECT tipo INTO NEW.tipo 
    FROM fornecedores 
    WHERE id = NEW.fornecedor_id;
    
    -- Se ainda for null, definir como 'Não especificado'
    IF NEW.tipo IS NULL THEN
      NEW.tipo := 'Não especificado';
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_titulo_tipo ON titulos;
CREATE TRIGGER set_titulo_tipo
BEFORE INSERT OR UPDATE ON titulos
FOR EACH ROW
EXECUTE FUNCTION set_titulo_tipo_from_fornecedor();

COMMIT;

-- Verificar se a tabela foi criada
SELECT 'Tabela titulos criada com sucesso!' as status;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name = 'titulos';