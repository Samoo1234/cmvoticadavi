-- Script completo para inicializar o banco de dados
-- Execute este script no SQL Editor do Supabase
-- IMPORTANTE: Execute na ordem apresentada

BEGIN;

-- 1. Criar tabela de filiais (base para outras tabelas)
CREATE TABLE IF NOT EXISTS filiais (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  endereco TEXT NOT NULL,
  telefone VARCHAR(20),
  responsavel VARCHAR(255),
  ativa BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2. Criar tabela de tipos de fornecedores
CREATE TABLE IF NOT EXISTS tipos_fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL UNIQUE,
  descricao TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3. Criar tabela de fornecedores
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18) NOT NULL UNIQUE,
  endereco TEXT,
  telefone VARCHAR(20),
  email VARCHAR(255),
  contato VARCHAR(255),
  tipo VARCHAR(255) NOT NULL DEFAULT 'Não especificado',
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4. Criar tabela de títulos
CREATE TABLE IF NOT EXISTS titulos (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  numero VARCHAR(50) NOT NULL UNIQUE,
  fornecedor_id BIGINT NOT NULL REFERENCES fornecedores(id),
  filial_id BIGINT NOT NULL REFERENCES filiais(id),
  tipo VARCHAR(255) DEFAULT 'Não especificado',
  valor DECIMAL(10, 2) NOT NULL,
  vencimento DATE NOT NULL,
  status VARCHAR(50) NOT NULL DEFAULT 'Pendente',
  pagamento DATE,
  observacoes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 5. Criar índices para performance
CREATE INDEX IF NOT EXISTS idx_filiais_ativa ON filiais(ativa);
CREATE INDEX IF NOT EXISTS idx_filiais_nome ON filiais(nome);

CREATE INDEX IF NOT EXISTS idx_tipos_fornecedores_nome ON tipos_fornecedores(nome);

CREATE INDEX IF NOT EXISTS idx_fornecedores_nome ON fornecedores(nome);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cnpj ON fornecedores(cnpj);
CREATE INDEX IF NOT EXISTS idx_fornecedores_tipo ON fornecedores(tipo);
CREATE INDEX IF NOT EXISTS idx_fornecedores_ativo ON fornecedores(ativo);

CREATE INDEX IF NOT EXISTS idx_titulos_numero ON titulos(numero);
CREATE INDEX IF NOT EXISTS idx_titulos_fornecedor_id ON titulos(fornecedor_id);
CREATE INDEX IF NOT EXISTS idx_titulos_filial_id ON titulos(filial_id);
CREATE INDEX IF NOT EXISTS idx_titulos_tipo ON titulos(tipo);
CREATE INDEX IF NOT EXISTS idx_titulos_vencimento ON titulos(vencimento);
CREATE INDEX IF NOT EXISTS idx_titulos_status ON titulos(status);

-- 6. Criar funções e triggers
CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para updated_at
DROP TRIGGER IF EXISTS set_timestamp_tipos_fornecedores ON tipos_fornecedores;
CREATE TRIGGER set_timestamp_tipos_fornecedores
BEFORE UPDATE ON tipos_fornecedores
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

DROP TRIGGER IF EXISTS set_timestamp_fornecedores ON fornecedores;
CREATE TRIGGER set_timestamp_fornecedores
BEFORE UPDATE ON fornecedores
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

DROP TRIGGER IF EXISTS set_timestamp_titulos ON titulos;
CREATE TRIGGER set_timestamp_titulos
BEFORE UPDATE ON titulos
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp();

-- Trigger para definir tipo do título baseado no fornecedor
CREATE OR REPLACE FUNCTION set_titulo_tipo_from_fornecedor()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.tipo IS NULL OR NEW.tipo = '' OR NEW.tipo = 'Não especificado' THEN
    SELECT tipo INTO NEW.tipo 
    FROM fornecedores 
    WHERE id = NEW.fornecedor_id;
    
    IF NEW.tipo IS NULL THEN
      NEW.tipo := 'Não especificado';
    END IF;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_titulo_tipo ON titulos;
CREATE TRIGGER set_titulo_tipo
BEFORE INSERT OR UPDATE ON titulos
FOR EACH ROW
EXECUTE FUNCTION set_titulo_tipo_from_fornecedor();

-- 7. Inserir dados de exemplo

-- Filiais
INSERT INTO filiais (nome, endereco, ativa) VALUES
('Filial Centro', 'Rua Principal, 123 - Centro', true),
('Filial Shopping', 'Av. Shopping, 456 - Bairro Comercial', true),
('Filial Norte', 'Rua Norte, 789 - Zona Norte', true)
ON CONFLICT DO NOTHING;

-- Tipos de fornecedores
INSERT INTO tipos_fornecedores (nome, descricao) VALUES
('Lentes', 'Fornecedores especializados em lentes oftálmicas'),
('Armações', 'Fornecedores de armações e óculos'),
('Equipamentos', 'Fornecedores de equipamentos ópticos e médicos'),
('Materiais', 'Fornecedores de materiais diversos para ótica'),
('Serviços', 'Prestadores de serviços especializados'),
('Produtos de Limpeza', 'Fornecedores de produtos para limpeza e manutenção'),
('Acessórios', 'Fornecedores de acessórios para óculos')
ON CONFLICT (nome) DO NOTHING;

-- Fornecedores
INSERT INTO fornecedores (nome, cnpj, endereco, telefone, email, tipo) VALUES
('Ótica Lentes Ltda', '12.345.678/0001-90', 'Rua das Lentes, 123 - Centro', '(11) 1234-5678', 'contato@opticalentes.com', 'Lentes'),
('Armações & Cia', '98.765.432/0001-10', 'Av. das Armações, 456 - Comercial', '(11) 9876-5432', 'vendas@armacoes.com', 'Armações'),
('Equipamentos Ópticos S.A.', '11.222.333/0001-44', 'Rua dos Equipamentos, 789 - Industrial', '(11) 1122-3344', 'equipamentos@opticos.com', 'Equipamentos'),
('Materiais Diversos Ltda', '55.666.777/0001-88', 'Av. Materiais, 321 - Zona Sul', '(11) 5566-7788', 'materiais@diversos.com', 'Materiais'),
('Serviços Especializados ME', '99.888.777/0001-66', 'Rua Serviços, 654 - Centro', '(11) 9988-7766', 'servicos@especializados.com', 'Serviços')
ON CONFLICT (cnpj) DO NOTHING;

COMMIT;

-- 8. Verificações finais
SELECT 'Banco de dados inicializado com sucesso!' as status;

SELECT 'Tabelas criadas:' as info;
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN ('filiais', 'tipos_fornecedores', 'fornecedores', 'titulos')
ORDER BY table_name;

SELECT 'Dados inseridos:' as info;
SELECT 'filiais' as tabela, COUNT(*) as registros FROM filiais
UNION ALL
SELECT 'tipos_fornecedores' as tabela, COUNT(*) as registros FROM tipos_fornecedores
UNION ALL
SELECT 'fornecedores' as tabela, COUNT(*) as registros FROM fornecedores
UNION ALL
SELECT 'titulos' as tabela, COUNT(*) as registros FROM titulos;