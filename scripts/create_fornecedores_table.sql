-- Script para criar a tabela fornecedores
-- Execute este script no SQL Editor do Supabase

BEGIN;

-- Criar a tabela fornecedores se não existir
CREATE TABLE IF NOT EXISTS fornecedores (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome VARCHAR(255) NOT NULL,
  cnpj VARCHAR(18) NOT NULL UNIQUE,
  endereco TEXT,
  telefone VARCHAR(20),
  email VARCHAR(255),
  contato VARCHAR(255),
  tipo VARCHAR(255) NOT NULL DEFAULT 'Não especificado',
  ativo BOOLEAN NOT NULL DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Comentários na tabela
COMMENT ON TABLE fornecedores IS 'Tabela para armazenar informações dos fornecedores';
COMMENT ON COLUMN fornecedores.id IS 'Identificador único do fornecedor';
COMMENT ON COLUMN fornecedores.nome IS 'Nome/Razão social do fornecedor';
COMMENT ON COLUMN fornecedores.cnpj IS 'CNPJ do fornecedor';
COMMENT ON COLUMN fornecedores.endereco IS 'Endereço completo do fornecedor';
COMMENT ON COLUMN fornecedores.telefone IS 'Telefone de contato do fornecedor';
COMMENT ON COLUMN fornecedores.email IS 'Email de contato do fornecedor';
COMMENT ON COLUMN fornecedores.contato IS 'Nome da pessoa de contato';
COMMENT ON COLUMN fornecedores.tipo IS 'Tipo/categoria do fornecedor';
COMMENT ON COLUMN fornecedores.ativo IS 'Indica se o fornecedor está ativo';
COMMENT ON COLUMN fornecedores.created_at IS 'Data e hora de criação do registro';
COMMENT ON COLUMN fornecedores.updated_at IS 'Data e hora da última atualização do registro';

-- Índices para melhorar performance
CREATE INDEX IF NOT EXISTS idx_fornecedores_nome ON fornecedores(nome);
CREATE INDEX IF NOT EXISTS idx_fornecedores_cnpj ON fornecedores(cnpj);
CREATE INDEX IF NOT EXISTS idx_fornecedores_tipo ON fornecedores(tipo);
CREATE INDEX IF NOT EXISTS idx_fornecedores_ativo ON fornecedores(ativo);

-- Trigger para atualizar updated_at automaticamente
CREATE OR REPLACE FUNCTION trigger_set_timestamp_fornecedores()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS set_timestamp_fornecedores ON fornecedores;
CREATE TRIGGER set_timestamp_fornecedores
BEFORE UPDATE ON fornecedores
FOR EACH ROW
EXECUTE FUNCTION trigger_set_timestamp_fornecedores();

-- Inserir dados de exemplo
INSERT INTO fornecedores (nome, cnpj, endereco, telefone, email, tipo) VALUES
('Ótica Lentes Ltda', '12.345.678/0001-90', 'Rua das Lentes, 123 - Centro', '(11) 1234-5678', 'contato@opticalentes.com', 'Lentes'),
('Armações & Cia', '98.765.432/0001-10', 'Av. das Armações, 456 - Comercial', '(11) 9876-5432', 'vendas@armacoes.com', 'Armações'),
('Equipamentos Ópticos S.A.', '11.222.333/0001-44', 'Rua dos Equipamentos, 789 - Industrial', '(11) 1122-3344', 'equipamentos@opticos.com', 'Equipamentos'),
('Materiais Diversos Ltda', '55.666.777/0001-88', 'Av. Materiais, 321 - Zona Sul', '(11) 5566-7788', 'materiais@diversos.com', 'Materiais'),
('Serviços Especializados ME', '99.888.777/0001-66', 'Rua Serviços, 654 - Centro', '(11) 9988-7766', 'servicos@especializados.com', 'Serviços')
ON CONFLICT (cnpj) DO NOTHING;

COMMIT;

-- Verificar se a tabela foi criada e os dados inseridos
SELECT 'Tabela fornecedores criada com sucesso!' as status;
SELECT COUNT(*) as total_fornecedores_inseridos FROM fornecedores;
SELECT id, nome, cnpj, tipo FROM fornecedores ORDER BY nome;